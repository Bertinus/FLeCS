{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FLeCS Flexible and Learnable Cell Simulations Overview TODO Installation TODO Quick usage TODO","title":"Home"},{"location":"#flecs","text":"Flexible and Learnable Cell Simulations","title":"FLeCS"},{"location":"#overview","text":"TODO","title":"Overview"},{"location":"#installation","text":"TODO","title":"Installation"},{"location":"#quick-usage","text":"TODO","title":"Quick usage"},{"location":"cell/","text":"Cell Class responsible for the interaction between the GRN object and the StructuralEquation object. Examples: A simple example of initialization: from flecs.cell import Cell from flecs.grn import RandomGRN from flecs.structural_equation import SigmoidLinearSE grn = RandomGRN(n_nodes=10, av_num_parents=3) linear_se = SigmoidLinearSE() my_cell = Cell(grn=grn, structural_equation=linear_se) Attributes: Name Type Description grn GRN Gene Regulatory Network of the cell. structural_equation StructuralEquation Structural Equation of the cell. edges property readonly ( torch.Tensor ) Edges. Shape (n_edges, 2). n_cells property readonly ( int ) Number of cells. n_edges property readonly ( int ) Number of edges. n_nodes property readonly ( int ) Number of nodes. state property writable ( torch.Tensor ): State of the cell. Shape (n_cells, n_nodes, *state_dim) get_decay_rates ( self , state ) Returns the decay rates, as computed by self.structural_equation . Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Decay rates. Shape (n_cells, n_nodes, *state_dim) get_derivatives ( self , state ) Returns the time derivative of the state, as computed by self.structural_equation . Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Time derivative of the state. Shape (n_cells, n_nodes, *state_dim). get_edge_parameter ( self , param_name ) Gets the edge parameter parameter_name . Parameters: Name Type Description Default param_name str Name of the parameter. required Returns: Type Description EdgeParameter Parameter. get_node_parameter ( self , param_name ) Gets the node parameter parameter_name . Parameters: Name Type Description Default param_name str Name of the parameter. required Returns: Type Description NodeParameter Parameter. get_parameter ( self , param_name ) Gets the parameter parameter_name . Parameters: Name Type Description Default param_name str Name of the parameter. required Returns: Type Description Parameter Parameter. get_production_rates ( self , state ) Returns the production rates, as computed by self.structural_equation . Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Production rates. Shape (n_cells, n_nodes, *state_dim) sync_grn_from_se ( self ) Updates the values of the node and edge attributes of the GRN based on the values of the node and edge parameters contained in the structural equation. If necessary, the relevant node and edge attributes are added to the GRN. sync_se_from_grn ( self ) Updates the values of the node and edge parameters contained in the structural equation based on the node and edge attributes of the GRN. If necessary, the relevant node and edge parameters are added to the structural equation. sync_se_from_grn_edges ( self ) Updates the values of the edge parameters contained in the structural equation based on the edge attributes of the GRN. If necessary, the relevant edge parameters are added to the structural equation. sync_se_from_grn_nodes ( self ) Updates the values of the node parameters contained in the structural equation based on the node attributes of the GRN. If necessary, the relevant node parameters are added to the structural equation.","title":"Cell"},{"location":"cell/#cell","text":"Class responsible for the interaction between the GRN object and the StructuralEquation object. Examples: A simple example of initialization: from flecs.cell import Cell from flecs.grn import RandomGRN from flecs.structural_equation import SigmoidLinearSE grn = RandomGRN(n_nodes=10, av_num_parents=3) linear_se = SigmoidLinearSE() my_cell = Cell(grn=grn, structural_equation=linear_se) Attributes: Name Type Description grn GRN Gene Regulatory Network of the cell. structural_equation StructuralEquation Structural Equation of the cell.","title":"Cell"},{"location":"cell/#flecs.cell.Cell.edges","text":"( torch.Tensor ) Edges. Shape (n_edges, 2).","title":"edges"},{"location":"cell/#flecs.cell.Cell.n_cells","text":"( int ) Number of cells.","title":"n_cells"},{"location":"cell/#flecs.cell.Cell.n_edges","text":"( int ) Number of edges.","title":"n_edges"},{"location":"cell/#flecs.cell.Cell.n_nodes","text":"( int ) Number of nodes.","title":"n_nodes"},{"location":"cell/#flecs.cell.Cell.state","text":"( torch.Tensor ): State of the cell. Shape (n_cells, n_nodes, *state_dim)","title":"state"},{"location":"cell/#flecs.cell.Cell.get_decay_rates","text":"Returns the decay rates, as computed by self.structural_equation . Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Decay rates. Shape (n_cells, n_nodes, *state_dim)","title":"get_decay_rates()"},{"location":"cell/#flecs.cell.Cell.get_derivatives","text":"Returns the time derivative of the state, as computed by self.structural_equation . Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Time derivative of the state. Shape (n_cells, n_nodes, *state_dim).","title":"get_derivatives()"},{"location":"cell/#flecs.cell.Cell.get_edge_parameter","text":"Gets the edge parameter parameter_name . Parameters: Name Type Description Default param_name str Name of the parameter. required Returns: Type Description EdgeParameter Parameter.","title":"get_edge_parameter()"},{"location":"cell/#flecs.cell.Cell.get_node_parameter","text":"Gets the node parameter parameter_name . Parameters: Name Type Description Default param_name str Name of the parameter. required Returns: Type Description NodeParameter Parameter.","title":"get_node_parameter()"},{"location":"cell/#flecs.cell.Cell.get_parameter","text":"Gets the parameter parameter_name . Parameters: Name Type Description Default param_name str Name of the parameter. required Returns: Type Description Parameter Parameter.","title":"get_parameter()"},{"location":"cell/#flecs.cell.Cell.get_production_rates","text":"Returns the production rates, as computed by self.structural_equation . Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Production rates. Shape (n_cells, n_nodes, *state_dim)","title":"get_production_rates()"},{"location":"cell/#flecs.cell.Cell.sync_grn_from_se","text":"Updates the values of the node and edge attributes of the GRN based on the values of the node and edge parameters contained in the structural equation. If necessary, the relevant node and edge attributes are added to the GRN.","title":"sync_grn_from_se()"},{"location":"cell/#flecs.cell.Cell.sync_se_from_grn","text":"Updates the values of the node and edge parameters contained in the structural equation based on the node and edge attributes of the GRN. If necessary, the relevant node and edge parameters are added to the structural equation.","title":"sync_se_from_grn()"},{"location":"cell/#flecs.cell.Cell.sync_se_from_grn_edges","text":"Updates the values of the edge parameters contained in the structural equation based on the edge attributes of the GRN. If necessary, the relevant edge parameters are added to the structural equation.","title":"sync_se_from_grn_edges()"},{"location":"cell/#flecs.cell.Cell.sync_se_from_grn_nodes","text":"Updates the values of the node parameters contained in the structural equation based on the node attributes of the GRN. If necessary, the relevant node parameters are added to the structural equation.","title":"sync_se_from_grn_nodes()"},{"location":"grn/","text":"Gene Regulatory Networks GRN Abstract class representing the Gene Regulatory Network (GRN) of the Cell. It inherits from the networkx.DiGraph class. Nodes typically represent genes, and edges typically represent a regulation relationship between a regulator gene (or transcription factor, TF) and a regulated gene. edge_attr_name_list : List [ str ] property readonly ( List[str] ) List containing the names of the edge attributes. n_edges : int property readonly ( int ) Number of edges. n_nodes : int property readonly ( int ) Number of nodes. node_attr_name_list : List [ str ] property readonly ( List[str] ) List containing the names of the node attributes. state : torch . Tensor property writable ( torch.Tensor ) State stored as a node attribute. tedges : torch . Tensor property readonly ( torch.Tensor ) Edges in the GRN. Shape (n_edges, 2). tf_indices : List [ int ] property readonly Method returning the list of the indices of the nodes which are transcription factors (TFs). Returns: Type Description List[int] List of the indices of the nodes which are transcription factors. __init__ ( self , ** kwargs ) special Initializes the GRN and makes sure that the object contains a 'is_TF' node attribute, which indicates the nodes that are transcription factors. Parameters: Name Type Description Default **kwargs keyword arguments passed to the method self.load_grn . {} draw ( self ) Method to draw the GRN, using the circular layout. draw_with_spring_layout ( self ) Method to draw the GRN, using the spring layout. get_attr ( self , attr_name , attr_type ) Parameters: Name Type Description Default attr_name str Name of the attribute. required attr_type str either \"node\" or \"edge\". required Returns: Type Description torch.Tensor Tensor corresponding to the attr_name attribute. get_edge_attr ( self , attr_name ) Gets the values of the attribute attr_name from all edges, and returns it as a single torch.Tensor. Parameters: Name Type Description Default attr_name str Name of the edge attribute. required Returns: Type Description torch.Tensor Tensor corresponding to the attr_name attribute. Shape (n_cells, n_edges, *attr_dim). get_node_attr ( self , attr_name ) Gets the values of the attribute attr_name from all nodes, and returns it as a single torch.Tensor. Parameters: Name Type Description Default attr_name str Name of the node attribute. required Returns: Type Description torch.Tensor Tensor corresponding to the attr_name attribute. Shape (n_cells, n_nodes, *attr_dim). load_grn ( ** kwargs ) classmethod Abstract method used to load the Gene Regulatory Network as a networkx.DiGraph object. Either from a database, or from a random initializer. Returns: Type Description networkx.DiGraph Graph from which the GRN is initialized. set_edge_attr ( self , attr_name , attr_values ) Sets the values of the attribute attr_name for all edges. Parameters: Name Type Description Default attr_name str Name of the edge attribute. required attr_values torch.Tensor Values for the edge attribute. Shape (n_cells, n_edges, *attr_dim). required set_node_attr ( self , attr_name , attr_values ) Sets the values of the attribute attr_name for all nodes. Parameters: Name Type Description Default attr_name str Name of the node attribute. required attr_values torch.Tensor Values for the node attribute. Shape (n_cells, n_nodes, *attr_dim). required Random GRN Class implementing a Gene Regulatory Network (GRN) initialized at random. It inherits from the GRN class. The elements of the adjacency matrix are sampled independently at random in {0, 1}, given the number of nodes, and the average number of parents per node. The resulting graph can contain cycles and self loops. In addition, the initializer makes sure that each node has at least one parent. __init__ ( self , n_nodes , av_num_parents ) special Parameters: Name Type Description Default n_nodes int Number of nodes. required av_num_parents float Average number of parents per node. required get_random_adjacency_mat ( n_nodes , av_num_parents ) classmethod Generates a random adjacency matrix. Each node has on average av_num_parents parents. Moreover, each node has at least one parent. Parameters: Name Type Description Default n_nodes int Number of nodes. required av_num_parents float Average number of parents per node. required Returns: Type Description numpy.array Adjacency matrix. Shape (n_nodes, n_nodes). load_grn ( n_nodes , av_num_parents ) classmethod Generates a random graph as a networkx.DiGraph object. Parameters: Name Type Description Default n_nodes int Desired number of nodes in the graph. required av_num_parents float Average number of parents per node. required Returns: Type Description networkx.DiGraph Random graph.","title":"Gene Regulatory Networks"},{"location":"grn/#gene-regulatory-networks","text":"","title":"Gene Regulatory Networks"},{"location":"grn/#grn","text":"Abstract class representing the Gene Regulatory Network (GRN) of the Cell. It inherits from the networkx.DiGraph class. Nodes typically represent genes, and edges typically represent a regulation relationship between a regulator gene (or transcription factor, TF) and a regulated gene.","title":"GRN"},{"location":"grn/#flecs.grn.GRN.edge_attr_name_list","text":"( List[str] ) List containing the names of the edge attributes.","title":"edge_attr_name_list"},{"location":"grn/#flecs.grn.GRN.n_edges","text":"( int ) Number of edges.","title":"n_edges"},{"location":"grn/#flecs.grn.GRN.n_nodes","text":"( int ) Number of nodes.","title":"n_nodes"},{"location":"grn/#flecs.grn.GRN.node_attr_name_list","text":"( List[str] ) List containing the names of the node attributes.","title":"node_attr_name_list"},{"location":"grn/#flecs.grn.GRN.state","text":"( torch.Tensor ) State stored as a node attribute.","title":"state"},{"location":"grn/#flecs.grn.GRN.tedges","text":"( torch.Tensor ) Edges in the GRN. Shape (n_edges, 2).","title":"tedges"},{"location":"grn/#flecs.grn.GRN.tf_indices","text":"Method returning the list of the indices of the nodes which are transcription factors (TFs). Returns: Type Description List[int] List of the indices of the nodes which are transcription factors.","title":"tf_indices"},{"location":"grn/#flecs.grn.GRN.__init__","text":"Initializes the GRN and makes sure that the object contains a 'is_TF' node attribute, which indicates the nodes that are transcription factors. Parameters: Name Type Description Default **kwargs keyword arguments passed to the method self.load_grn . {}","title":"__init__()"},{"location":"grn/#flecs.grn.GRN.draw","text":"Method to draw the GRN, using the circular layout.","title":"draw()"},{"location":"grn/#flecs.grn.GRN.draw_with_spring_layout","text":"Method to draw the GRN, using the spring layout.","title":"draw_with_spring_layout()"},{"location":"grn/#flecs.grn.GRN.get_attr","text":"Parameters: Name Type Description Default attr_name str Name of the attribute. required attr_type str either \"node\" or \"edge\". required Returns: Type Description torch.Tensor Tensor corresponding to the attr_name attribute.","title":"get_attr()"},{"location":"grn/#flecs.grn.GRN.get_edge_attr","text":"Gets the values of the attribute attr_name from all edges, and returns it as a single torch.Tensor. Parameters: Name Type Description Default attr_name str Name of the edge attribute. required Returns: Type Description torch.Tensor Tensor corresponding to the attr_name attribute. Shape (n_cells, n_edges, *attr_dim).","title":"get_edge_attr()"},{"location":"grn/#flecs.grn.GRN.get_node_attr","text":"Gets the values of the attribute attr_name from all nodes, and returns it as a single torch.Tensor. Parameters: Name Type Description Default attr_name str Name of the node attribute. required Returns: Type Description torch.Tensor Tensor corresponding to the attr_name attribute. Shape (n_cells, n_nodes, *attr_dim).","title":"get_node_attr()"},{"location":"grn/#flecs.grn.GRN.load_grn","text":"Abstract method used to load the Gene Regulatory Network as a networkx.DiGraph object. Either from a database, or from a random initializer. Returns: Type Description networkx.DiGraph Graph from which the GRN is initialized.","title":"load_grn()"},{"location":"grn/#flecs.grn.GRN.set_edge_attr","text":"Sets the values of the attribute attr_name for all edges. Parameters: Name Type Description Default attr_name str Name of the edge attribute. required attr_values torch.Tensor Values for the edge attribute. Shape (n_cells, n_edges, *attr_dim). required","title":"set_edge_attr()"},{"location":"grn/#flecs.grn.GRN.set_node_attr","text":"Sets the values of the attribute attr_name for all nodes. Parameters: Name Type Description Default attr_name str Name of the node attribute. required attr_values torch.Tensor Values for the node attribute. Shape (n_cells, n_nodes, *attr_dim). required","title":"set_node_attr()"},{"location":"grn/#random-grn","text":"Class implementing a Gene Regulatory Network (GRN) initialized at random. It inherits from the GRN class. The elements of the adjacency matrix are sampled independently at random in {0, 1}, given the number of nodes, and the average number of parents per node. The resulting graph can contain cycles and self loops. In addition, the initializer makes sure that each node has at least one parent.","title":"Random GRN"},{"location":"grn/#flecs.grn.RandomGRN.__init__","text":"Parameters: Name Type Description Default n_nodes int Number of nodes. required av_num_parents float Average number of parents per node. required","title":"__init__()"},{"location":"grn/#flecs.grn.RandomGRN.get_random_adjacency_mat","text":"Generates a random adjacency matrix. Each node has on average av_num_parents parents. Moreover, each node has at least one parent. Parameters: Name Type Description Default n_nodes int Number of nodes. required av_num_parents float Average number of parents per node. required Returns: Type Description numpy.array Adjacency matrix. Shape (n_nodes, n_nodes).","title":"get_random_adjacency_mat()"},{"location":"grn/#flecs.grn.RandomGRN.load_grn","text":"Generates a random graph as a networkx.DiGraph object. Parameters: Name Type Description Default n_nodes int Desired number of nodes in the graph. required av_num_parents float Average number of parents per node. required Returns: Type Description networkx.DiGraph Random graph.","title":"load_grn()"},{"location":"intervention/","text":"Interventions Abstract class Abstract class responsible for intervening on cells, and resetting cells to their default states. reset ( self , cell ) Abstract method for resetting cells to their default state. Parameters: Name Type Description Default cell Cell Cell object required Knockout Intervention Class to perform Knockout interventions on cells. A knockout on node k is simulated by removing all outgoing edges of node k . This corresponds to a complete loss of function of the protein coded by gene k . One can perform knockouts on several genes. Attributes: Name Type Description intervened_nodes Dict[int, list] Dictionary whose keys correspond to the nodes that have been knocked out. intervened_nodes[k] contains the list of edges, as well as their attributes, that have been removed from the cell because of the knockout of node k . intervene ( self , cell , node ) Performs a knockout intervention on the cell by removing all outgoing edges of node node . Parameters: Name Type Description Default cell Cell Cell to intervene on. required node int Index of the node on which the knockout is performed. required reset ( self , cell ) Resets the cell to its default state. Parameters: Name Type Description Default cell Cell Cell to reset. required Drug Linear Intervention Class to perform drug (linear) interventions on cells. A drug intervention is simulated by shifting the production rates by a fixed vector `drug_direct_effects``, representing the direct effects of the drug on the genes: $$ (\\operatorname{production rates}) \\leftarrow (\\operatorname{production rates}) + (\\operatorname{drug direct effects}). $$ One can perform several drug interventions, corresponding to combinations of drugs. Attributes: Name Type Description sum_of_direct_effects torch.Tensor Sum of the direct effects of the drugs that have been applied. Shape (n_nodes). intervene ( self , cell , drug_direct_effects ) Performs a drug intervention on the cell. Production rates are shifted by drug_direct_effects . Parameters: Name Type Description Default cell Cell Cell to intervene on. required drug_direct_effects torch.Tensor Direct effects of the drug on the genes. Shape (n_nodes). required reset ( self , cell ) Resets the cell to its default state. Parameters: Name Type Description Default cell Cell Cell to reset. required","title":"Interventions"},{"location":"intervention/#interventions","text":"","title":"Interventions"},{"location":"intervention/#abstract-class","text":"Abstract class responsible for intervening on cells, and resetting cells to their default states.","title":"Abstract class"},{"location":"intervention/#flecs.intervention.Intervention.reset","text":"Abstract method for resetting cells to their default state. Parameters: Name Type Description Default cell Cell Cell object required","title":"reset()"},{"location":"intervention/#knockout-intervention","text":"Class to perform Knockout interventions on cells. A knockout on node k is simulated by removing all outgoing edges of node k . This corresponds to a complete loss of function of the protein coded by gene k . One can perform knockouts on several genes. Attributes: Name Type Description intervened_nodes Dict[int, list] Dictionary whose keys correspond to the nodes that have been knocked out. intervened_nodes[k] contains the list of edges, as well as their attributes, that have been removed from the cell because of the knockout of node k .","title":"Knockout Intervention"},{"location":"intervention/#flecs.intervention.KnockoutIntervention.intervene","text":"Performs a knockout intervention on the cell by removing all outgoing edges of node node . Parameters: Name Type Description Default cell Cell Cell to intervene on. required node int Index of the node on which the knockout is performed. required","title":"intervene()"},{"location":"intervention/#flecs.intervention.KnockoutIntervention.reset","text":"Resets the cell to its default state. Parameters: Name Type Description Default cell Cell Cell to reset. required","title":"reset()"},{"location":"intervention/#drug-linear-intervention","text":"Class to perform drug (linear) interventions on cells. A drug intervention is simulated by shifting the production rates by a fixed vector `drug_direct_effects``, representing the direct effects of the drug on the genes: $$ (\\operatorname{production rates}) \\leftarrow (\\operatorname{production rates}) + (\\operatorname{drug direct effects}). $$ One can perform several drug interventions, corresponding to combinations of drugs. Attributes: Name Type Description sum_of_direct_effects torch.Tensor Sum of the direct effects of the drugs that have been applied. Shape (n_nodes).","title":"Drug Linear Intervention"},{"location":"intervention/#flecs.intervention.DrugLinearIntervention.intervene","text":"Performs a drug intervention on the cell. Production rates are shifted by drug_direct_effects . Parameters: Name Type Description Default cell Cell Cell to intervene on. required drug_direct_effects torch.Tensor Direct effects of the drug on the genes. Shape (n_nodes). required","title":"intervene()"},{"location":"intervention/#flecs.intervention.DrugLinearIntervention.reset","text":"Resets the cell to its default state. Parameters: Name Type Description Default cell Cell Cell to reset. required","title":"reset()"},{"location":"mutation/","text":"Mutations Abstract class Abstract class responsible for applying mutations to cells. duplicate_and_mutate_attribute ( self , cell , attr_name ) Duplicates and mutates the attribute attr_name . The attribute is duplicated so that its first dimension matches cell.n_cells . After that, it is mutated to induce variations between cells. Parameters: Name Type Description Default cell Cell Cell. required attr_name str Name of the attribute. required Gaussian Mutations Class to apply mutations in the form of Gaussian noise. Attributes: Name Type Description noise_dist torch.distributions.normal.Normal Normal distribution to sample noise. __init__ ( self , sigma ) special Parameters: Name Type Description Default sigma float standard deviation of the Gaussian noise to be applied. required Bernoulli Mutation Class to apply mutations wherein each parametric element is set to zero with a probability p . Attributes: Name Type Description noise_dist torch.distributions.bernoulli.Bernoulli Bernoulli distribution to sample noise. __init__ ( self , p ) special Parameters: Name Type Description Default p float probability of being set to zero required","title":"Mutations"},{"location":"mutation/#mutations","text":"","title":"Mutations"},{"location":"mutation/#abstract-class","text":"Abstract class responsible for applying mutations to cells.","title":"Abstract class"},{"location":"mutation/#flecs.mutation.Mutation.duplicate_and_mutate_attribute","text":"Duplicates and mutates the attribute attr_name . The attribute is duplicated so that its first dimension matches cell.n_cells . After that, it is mutated to induce variations between cells. Parameters: Name Type Description Default cell Cell Cell. required attr_name str Name of the attribute. required","title":"duplicate_and_mutate_attribute()"},{"location":"mutation/#gaussian-mutations","text":"Class to apply mutations in the form of Gaussian noise. Attributes: Name Type Description noise_dist torch.distributions.normal.Normal Normal distribution to sample noise.","title":"Gaussian Mutations"},{"location":"mutation/#flecs.mutation.GaussianMutation.__init__","text":"Parameters: Name Type Description Default sigma float standard deviation of the Gaussian noise to be applied. required","title":"__init__()"},{"location":"mutation/#bernoulli-mutation","text":"Class to apply mutations wherein each parametric element is set to zero with a probability p . Attributes: Name Type Description noise_dist torch.distributions.bernoulli.Bernoulli Bernoulli distribution to sample noise.","title":"Bernoulli Mutation"},{"location":"mutation/#flecs.mutation.BernoulliMutation.__init__","text":"Parameters: Name Type Description Default p float probability of being set to zero required","title":"__init__()"},{"location":"parameter/","text":"Parameter classes Parameter Abstract class representing a parameter of the cell. It can correspond to either a node or an edge parameter. Attributes: Name Type Description dim Tuple[int, ...] Dimension of the parameter. In the case of a node parameter, each node will be associated with a torch.Tensor of shape (n_cells, *dim). prior_dist torch.distributions.distribution.Distribution Prior distribution of the parameter. Can be used to initialize or re-sample the parameter. tensor torch.Tensor Values of the parameter. Shape (n_cells, length, *dim). Length is typically the number of nodes or edges. n_cells property readonly ( int ) Second dimension of self.tensor . Typically the number of cells. __init__ ( self , dim , prior_dist = None , tensor = None ) special Parameters: Name Type Description Default dim Tuple[int, ...] Dimension of the parameter. In the case of a node parameter, each node will be associated with a torch.Tensor of shape (n_cells, *dim). required prior_dist torch.distributions.distribution.Distribution Prior distribution of the parameter. Can be used to initialize or re-sample the parameter. Default is None None tensor torch.Tensor Values of the parameter. Shape (n_cells, length, *dim). Length is typically the number of nodes or edges. Default is None. None initialize_from_prior_dist ( self , length ) Initializes the values of the self.tensor based on the prior distribution self.prior_dist Parameters: Name Type Description Default length int Second dimension for self.tensor . Typically the number of nodes or the number of edges. required Node Parameter Subclass representing a node parameter. Edge Parameter Subclass representing an edge parameter.","title":"Parameters"},{"location":"parameter/#parameter-classes","text":"","title":"Parameter classes"},{"location":"parameter/#parameter","text":"Abstract class representing a parameter of the cell. It can correspond to either a node or an edge parameter. Attributes: Name Type Description dim Tuple[int, ...] Dimension of the parameter. In the case of a node parameter, each node will be associated with a torch.Tensor of shape (n_cells, *dim). prior_dist torch.distributions.distribution.Distribution Prior distribution of the parameter. Can be used to initialize or re-sample the parameter. tensor torch.Tensor Values of the parameter. Shape (n_cells, length, *dim). Length is typically the number of nodes or edges.","title":"Parameter"},{"location":"parameter/#flecs.parameter.Parameter.n_cells","text":"( int ) Second dimension of self.tensor . Typically the number of cells.","title":"n_cells"},{"location":"parameter/#flecs.parameter.Parameter.__init__","text":"Parameters: Name Type Description Default dim Tuple[int, ...] Dimension of the parameter. In the case of a node parameter, each node will be associated with a torch.Tensor of shape (n_cells, *dim). required prior_dist torch.distributions.distribution.Distribution Prior distribution of the parameter. Can be used to initialize or re-sample the parameter. Default is None None tensor torch.Tensor Values of the parameter. Shape (n_cells, length, *dim). Length is typically the number of nodes or edges. Default is None. None","title":"__init__()"},{"location":"parameter/#flecs.parameter.Parameter.initialize_from_prior_dist","text":"Initializes the values of the self.tensor based on the prior distribution self.prior_dist Parameters: Name Type Description Default length int Second dimension for self.tensor . Typically the number of nodes or the number of edges. required","title":"initialize_from_prior_dist()"},{"location":"parameter/#node-parameter","text":"Subclass representing a node parameter.","title":"Node Parameter"},{"location":"parameter/#edge-parameter","text":"Subclass representing an edge parameter.","title":"Edge Parameter"},{"location":"structural_equation/","text":"Structural Equations StructuralEquation Abstract Class representing the Structural Equation of the Cell. The Structural Equation is responsible for computing the production rates and decay rates of all the genes. It represents the Cell as a set Tensors, which can be used for efficient computation and training. Its edges and number of nodes are based on the structure of a GRN object. Attributes: Name Type Description edges torch.Tensor Edges in the gene regulatory network of the cell. Shape (n_edges, 2) edge_heads property readonly ( torch.Tensor ) All children. Shape (n_edges) edge_parameter_dict : Dict [ str , flecs . parameter . EdgeParameter ] property readonly Returns: Type Description Dict[str, EdgeParameter] Dictionary containing all edge parameters. Keys are the names of the parameters. edge_tails property readonly ( torch.Tensor ) All parents. Shape (n_edges) edges property writable ( torch.Tensor ) Edges. Shape (n_edges, 2). n_edges property readonly ( int ) Number of edges. n_nodes property readonly ( int ) Number of nodes. node_parameter_dict : Dict [ str , flecs . parameter . NodeParameter ] property readonly Returns: Type Description Dict[str, NodeParameter] Dictionary containing all node parameters. Keys are the names of the parameters. parameter_dict : Dict [ str , flecs . parameter . Parameter ] property readonly Returns: Type Description Dict[str, Parameter] Dictionary containing all (node and edge) parameters. Keys are the names of the parameters. get_decay_rates ( self , state ) Abstract method to compute the decay rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Decay rates. Shape (n_cells, n_nodes, *node_state_dim) get_derivatives ( self , state ) Computes the time derivative of the state: $$ {d \\operatorname{state} \\over dt} = (\\operatorname{production rates}) - (\\operatorname{decay rates}). $$ Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Time derivative of the state. Shape (n_cells, n_nodes, *state_dim). get_production_rates ( self , state ) Abstract method to compute the production rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Production rates. Shape (n_cells, n_nodes, *state_dim) initialize_given_structure ( self , n_nodes , edges ) Sets the self.edges attribute, and initializes, using their prior distributions, all node and edge parameters based on the structure of a graph represented by its number of nodes and list of edges. Parameters: Name Type Description Default n_nodes int Number of nodes. required edges torch.Tensor Edges. Shape (n_edges, 2). required set_parameter ( self , param_name , param ) Creates a new attribute named param_name which point to the param object. Parameters: Name Type Description Default param_name str Name of the parameter. required param Parameter Parameter object. required to ( self , device ) Sends all torch.Tensors of the StructuralEquation object to the device device . Parameters: Name Type Description Default device torch.cuda.device Device. required SigmoidLinearSE Structural Equation implementing production rates: \\[ (\\operatorname{production rates})_i = \\operatorname{sigmoid}(\\sum_{j \\in PA_i} \\omega_{ji} \\cdot \\operatorname{state}_j) \\] and decay rates: $$ (\\operatorname{decay rates}) = (\\operatorname{gene decays}) \\cdot \\operatorname{state}. $$ Attributes: Name Type Description edges torch.Tensor Edges in the gene regulatory network of the cell. Shape (n_edges, 2) gene_decay NodeParameter Rate of exponential decay of the genes. weights EdgeParameter linear strength of regulation between genes. Source code in flecs/structural_equation.py class SigmoidLinearSE ( StructuralEquation ): \"\"\" Structural Equation implementing production rates: $$ (\\operatorname{production rates})_i = \\operatorname{sigmoid}(\\sum_{j \\in PA_i} \\omega_{ji} \\cdot \\operatorname{state}_j) $$ and decay rates: $$ (\\operatorname{decay rates}) = (\\operatorname{gene decays}) \\cdot \\operatorname{state}. $$ Attributes: edges (torch.Tensor): Edges in the gene regulatory network of the cell. Shape (n_edges, 2) gene_decay (NodeParameter): Rate of exponential decay of the genes. weights (EdgeParameter): linear strength of regulation between genes. \"\"\" def __init__ ( self , gene_decay : NodeParameter = NodeParameter ( dim = ( 1 ,), prior_dist = Gamma ( concentration = 10 , rate = 10 ) ), weights : EdgeParameter = EdgeParameter ( dim = ( 1 ,), prior_dist = Normal ( 0 , 1 )), ): super () . __init__ () self . gene_decay = gene_decay self . weights = weights def get_production_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the production rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Production rates. Shape (n_cells, n_nodes, *state_dim) \"\"\" # Compute messages parent_inputs = state [:, self . edge_tails ] edge_messages = parent_inputs * self . weights . tensor # Send messages to edge heads lin_fct = torch_scatter . scatter ( edge_messages , self . edge_heads , dim = 1 ) return torch . sigmoid ( lin_fct ) def get_decay_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the decay rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Decay rates. Shape (n_cells, n_nodes, *node_state_dim) \"\"\" return self . gene_decay . tensor * state get_decay_rates ( self , state ) Computes the decay rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Decay rates. Shape (n_cells, n_nodes, *node_state_dim) Source code in flecs/structural_equation.py def get_decay_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the decay rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Decay rates. Shape (n_cells, n_nodes, *node_state_dim) \"\"\" return self . gene_decay . tensor * state get_production_rates ( self , state ) Computes the production rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Production rates. Shape (n_cells, n_nodes, *state_dim) Source code in flecs/structural_equation.py def get_production_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the production rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Production rates. Shape (n_cells, n_nodes, *state_dim) \"\"\" # Compute messages parent_inputs = state [:, self . edge_tails ] edge_messages = parent_inputs * self . weights . tensor # Send messages to edge heads lin_fct = torch_scatter . scatter ( edge_messages , self . edge_heads , dim = 1 ) return torch . sigmoid ( lin_fct )","title":"Structural Equations"},{"location":"structural_equation/#structural-equations","text":"","title":"Structural Equations"},{"location":"structural_equation/#structuralequation","text":"Abstract Class representing the Structural Equation of the Cell. The Structural Equation is responsible for computing the production rates and decay rates of all the genes. It represents the Cell as a set Tensors, which can be used for efficient computation and training. Its edges and number of nodes are based on the structure of a GRN object. Attributes: Name Type Description edges torch.Tensor Edges in the gene regulatory network of the cell. Shape (n_edges, 2)","title":"StructuralEquation"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.edge_heads","text":"( torch.Tensor ) All children. Shape (n_edges)","title":"edge_heads"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.edge_parameter_dict","text":"Returns: Type Description Dict[str, EdgeParameter] Dictionary containing all edge parameters. Keys are the names of the parameters.","title":"edge_parameter_dict"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.edge_tails","text":"( torch.Tensor ) All parents. Shape (n_edges)","title":"edge_tails"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.edges","text":"( torch.Tensor ) Edges. Shape (n_edges, 2).","title":"edges"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.n_edges","text":"( int ) Number of edges.","title":"n_edges"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.n_nodes","text":"( int ) Number of nodes.","title":"n_nodes"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.node_parameter_dict","text":"Returns: Type Description Dict[str, NodeParameter] Dictionary containing all node parameters. Keys are the names of the parameters.","title":"node_parameter_dict"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.parameter_dict","text":"Returns: Type Description Dict[str, Parameter] Dictionary containing all (node and edge) parameters. Keys are the names of the parameters.","title":"parameter_dict"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.get_decay_rates","text":"Abstract method to compute the decay rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Decay rates. Shape (n_cells, n_nodes, *node_state_dim)","title":"get_decay_rates()"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.get_derivatives","text":"Computes the time derivative of the state: $$ {d \\operatorname{state} \\over dt} = (\\operatorname{production rates}) - (\\operatorname{decay rates}). $$ Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Time derivative of the state. Shape (n_cells, n_nodes, *state_dim).","title":"get_derivatives()"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.get_production_rates","text":"Abstract method to compute the production rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Production rates. Shape (n_cells, n_nodes, *state_dim)","title":"get_production_rates()"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.initialize_given_structure","text":"Sets the self.edges attribute, and initializes, using their prior distributions, all node and edge parameters based on the structure of a graph represented by its number of nodes and list of edges. Parameters: Name Type Description Default n_nodes int Number of nodes. required edges torch.Tensor Edges. Shape (n_edges, 2). required","title":"initialize_given_structure()"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.set_parameter","text":"Creates a new attribute named param_name which point to the param object. Parameters: Name Type Description Default param_name str Name of the parameter. required param Parameter Parameter object. required","title":"set_parameter()"},{"location":"structural_equation/#flecs.structural_equation.StructuralEquation.to","text":"Sends all torch.Tensors of the StructuralEquation object to the device device . Parameters: Name Type Description Default device torch.cuda.device Device. required","title":"to()"},{"location":"structural_equation/#sigmoidlinearse","text":"Structural Equation implementing production rates: \\[ (\\operatorname{production rates})_i = \\operatorname{sigmoid}(\\sum_{j \\in PA_i} \\omega_{ji} \\cdot \\operatorname{state}_j) \\] and decay rates: $$ (\\operatorname{decay rates}) = (\\operatorname{gene decays}) \\cdot \\operatorname{state}. $$ Attributes: Name Type Description edges torch.Tensor Edges in the gene regulatory network of the cell. Shape (n_edges, 2) gene_decay NodeParameter Rate of exponential decay of the genes. weights EdgeParameter linear strength of regulation between genes. Source code in flecs/structural_equation.py class SigmoidLinearSE ( StructuralEquation ): \"\"\" Structural Equation implementing production rates: $$ (\\operatorname{production rates})_i = \\operatorname{sigmoid}(\\sum_{j \\in PA_i} \\omega_{ji} \\cdot \\operatorname{state}_j) $$ and decay rates: $$ (\\operatorname{decay rates}) = (\\operatorname{gene decays}) \\cdot \\operatorname{state}. $$ Attributes: edges (torch.Tensor): Edges in the gene regulatory network of the cell. Shape (n_edges, 2) gene_decay (NodeParameter): Rate of exponential decay of the genes. weights (EdgeParameter): linear strength of regulation between genes. \"\"\" def __init__ ( self , gene_decay : NodeParameter = NodeParameter ( dim = ( 1 ,), prior_dist = Gamma ( concentration = 10 , rate = 10 ) ), weights : EdgeParameter = EdgeParameter ( dim = ( 1 ,), prior_dist = Normal ( 0 , 1 )), ): super () . __init__ () self . gene_decay = gene_decay self . weights = weights def get_production_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the production rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Production rates. Shape (n_cells, n_nodes, *state_dim) \"\"\" # Compute messages parent_inputs = state [:, self . edge_tails ] edge_messages = parent_inputs * self . weights . tensor # Send messages to edge heads lin_fct = torch_scatter . scatter ( edge_messages , self . edge_heads , dim = 1 ) return torch . sigmoid ( lin_fct ) def get_decay_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the decay rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Decay rates. Shape (n_cells, n_nodes, *node_state_dim) \"\"\" return self . gene_decay . tensor * state","title":"SigmoidLinearSE"},{"location":"structural_equation/#flecs.structural_equation.SigmoidLinearSE.get_decay_rates","text":"Computes the decay rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Decay rates. Shape (n_cells, n_nodes, *node_state_dim) Source code in flecs/structural_equation.py def get_decay_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the decay rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Decay rates. Shape (n_cells, n_nodes, *node_state_dim) \"\"\" return self . gene_decay . tensor * state","title":"get_decay_rates()"},{"location":"structural_equation/#flecs.structural_equation.SigmoidLinearSE.get_production_rates","text":"Computes the production rates of all the genes. Parameters: Name Type Description Default state torch.Tensor State of the cell. Shape (n_cells, n_nodes, *state_dim) required Returns: Type Description torch.Tensor Production rates. Shape (n_cells, n_nodes, *state_dim) Source code in flecs/structural_equation.py def get_production_rates ( self , state : torch . Tensor ) -> torch . Tensor : \"\"\" Computes the production rates of all the genes. Args: state (torch.Tensor): State of the cell. Shape (n_cells, n_nodes, *state_dim) Returns: torch.Tensor: Production rates. Shape (n_cells, n_nodes, *state_dim) \"\"\" # Compute messages parent_inputs = state [:, self . edge_tails ] edge_messages = parent_inputs * self . weights . tensor # Send messages to edge heads lin_fct = torch_scatter . scatter ( edge_messages , self . edge_heads , dim = 1 ) return torch . sigmoid ( lin_fct )","title":"get_production_rates()"},{"location":"trajectory/","text":"Trajectories Determistic Trajectory with Euler's method Simulates the deterministic trajectory of the cell using Euler's method: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + {d \\operatorname{state} \\over dt} \\Delta t. $$ Parameters: Name Type Description Default cell Cell Cell. required time_range 1D torch.Tensor Time points at which the cell state should be evaluated. required Returns: Type Description torch.Tensor Trajectory of shape (n_time_points, n_cells, n_nodes, *state_dim) Determistic Trajectory with solver Simulates the deterministic trajectory of the cell using the torchdiffeq solver. Parameters: Name Type Description Default cell Cell Cell. required time_range 1D torch.Tensor Time points at which the cell state should be evaluated. required method str argument for the solver. 'dopri5' Returns: Type Description torch.Tensor Trajectory of shape (n_time_points, n_cells, n_nodes, *state_dim) Stochastic Trajectory Simulates stochastic trajectories of the cell using the tau-leaping method, which is a variation of the Gillespie algorithm: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{production rates})] - \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{decay rates})]. $$ Parameters: Name Type Description Default cell Cell Cell. required time_range 1D torch.Tensor Time points at which the cell state should be evaluated. required Returns: Type Description torch.Tensor Trajectory of shape (n_time_points, n_cells, n_nodes, *state_dim)","title":"Trajectories"},{"location":"trajectory/#trajectories","text":"","title":"Trajectories"},{"location":"trajectory/#determistic-trajectory-with-eulers-method","text":"Simulates the deterministic trajectory of the cell using Euler's method: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + {d \\operatorname{state} \\over dt} \\Delta t. $$ Parameters: Name Type Description Default cell Cell Cell. required time_range 1D torch.Tensor Time points at which the cell state should be evaluated. required Returns: Type Description torch.Tensor Trajectory of shape (n_time_points, n_cells, n_nodes, *state_dim)","title":"Determistic Trajectory with Euler's method"},{"location":"trajectory/#determistic-trajectory-with-solver","text":"Simulates the deterministic trajectory of the cell using the torchdiffeq solver. Parameters: Name Type Description Default cell Cell Cell. required time_range 1D torch.Tensor Time points at which the cell state should be evaluated. required method str argument for the solver. 'dopri5' Returns: Type Description torch.Tensor Trajectory of shape (n_time_points, n_cells, n_nodes, *state_dim)","title":"Determistic Trajectory with solver"},{"location":"trajectory/#stochastic-trajectory","text":"Simulates stochastic trajectories of the cell using the tau-leaping method, which is a variation of the Gillespie algorithm: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{production rates})] - \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{decay rates})]. $$ Parameters: Name Type Description Default cell Cell Cell. required time_range 1D torch.Tensor Time points at which the cell state should be evaluated. required Returns: Type Description torch.Tensor Trajectory of shape (n_time_points, n_cells, n_nodes, *state_dim)","title":"Stochastic Trajectory"},{"location":"utils/","text":"Utils Project root Returns: Type Description str Path to the root of the project. Set seed Sets the numpy and torch seeds. Parameters: Name Type Description Default k seed. required Plot trajectory Function to plot the time evolution of the state of a cell. Parameters: Name Type Description Default trajectory torch.Tensor States of the cell observed at the different time points. Shape (n_time_points, n_cells, n_genes). required time_points list or 1D numpy.array Times of the observations. None legend bool Whether to add a legend to the plot. True Exceptions: Type Description RuntimeWarning If the trajectory contains more than one cell. Only the trajectory of the first cell is plotted.","title":"Utils"},{"location":"utils/#utils","text":"","title":"Utils"},{"location":"utils/#project-root","text":"Returns: Type Description str Path to the root of the project.","title":"Project root"},{"location":"utils/#set-seed","text":"Sets the numpy and torch seeds. Parameters: Name Type Description Default k seed. required","title":"Set seed"},{"location":"utils/#plot-trajectory","text":"Function to plot the time evolution of the state of a cell. Parameters: Name Type Description Default trajectory torch.Tensor States of the cell observed at the different time points. Shape (n_time_points, n_cells, n_genes). required time_points list or 1D numpy.array Times of the observations. None legend bool Whether to add a legend to the plot. True Exceptions: Type Description RuntimeWarning If the trajectory contains more than one cell. Only the trajectory of the first cell is plotted.","title":"Plot trajectory"}]}