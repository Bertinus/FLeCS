{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"F lexible and Le arnable C ell S imulations Overview TODO Installation TODO Quick usage TODO","title":"Home"},{"location":"#flexible-and-learnable-cell-simulations","text":"","title":"Flexible and Learnable Cell Simulations"},{"location":"#overview","text":"TODO","title":"Overview"},{"location":"#installation","text":"TODO","title":"Installation"},{"location":"#quick-usage","text":"TODO","title":"Quick usage"},{"location":"cell_population/","text":"Cell Population Base class Bases: ABC __init__ ( interaction_graph , n_cells = 1 , per_node_state_dim = 1 ) A population of independnet cells (no cell-cell interactions). Parameters: Name Type Description Default interaction_graph required n_cells int Number of independent cells in the population. 1 get_derivatives ( state ) Estimates derivative of system using first differences. get_edge_set ( e_type , e_type_data ) \"Given an edge type, and edge data, return an edge set. get_node_set ( n_type_data ) Given node type data, return a node set with the associated attributes. initialize_from_interaction_graph ( interaction_graph ) Initializes a graph from an interaction_graph object. Test class Bases: CellPopulation __init__ ( n_cells = 1 ) Information about the test interaction data 60 nodes and 57 edges. 2 different types of nodes: ['compound', 'gene']. 5 different types of interactions: ['', 'activation', 'binding/association', 'compound', 'inhibition']. compute_decay_rates () Applies a generic decay fn to each node type individually. compute_production_rates () Applies a generic production rate fn to each edge type individually.","title":"Cell Population"},{"location":"cell_population/#cell-population","text":"","title":"Cell Population"},{"location":"cell_population/#base-class","text":"Bases: ABC","title":"Base class"},{"location":"cell_population/#flecs.cell_population.CellPopulation.__init__","text":"A population of independnet cells (no cell-cell interactions). Parameters: Name Type Description Default interaction_graph required n_cells int Number of independent cells in the population. 1","title":"__init__()"},{"location":"cell_population/#flecs.cell_population.CellPopulation.get_derivatives","text":"Estimates derivative of system using first differences.","title":"get_derivatives()"},{"location":"cell_population/#flecs.cell_population.CellPopulation.get_edge_set","text":"\"Given an edge type, and edge data, return an edge set.","title":"get_edge_set()"},{"location":"cell_population/#flecs.cell_population.CellPopulation.get_node_set","text":"Given node type data, return a node set with the associated attributes.","title":"get_node_set()"},{"location":"cell_population/#flecs.cell_population.CellPopulation.initialize_from_interaction_graph","text":"Initializes a graph from an interaction_graph object.","title":"initialize_from_interaction_graph()"},{"location":"cell_population/#test-class","text":"Bases: CellPopulation","title":"Test class"},{"location":"cell_population/#flecs.cell_population.TestCellPop.__init__","text":"Information about the test interaction data 60 nodes and 57 edges. 2 different types of nodes: ['compound', 'gene']. 5 different types of interactions: ['', 'activation', 'binding/association', 'compound', 'inhibition'].","title":"__init__()"},{"location":"cell_population/#flecs.cell_population.TestCellPop.compute_decay_rates","text":"Applies a generic decay fn to each node type individually.","title":"compute_decay_rates()"},{"location":"cell_population/#flecs.cell_population.TestCellPop.compute_production_rates","text":"Applies a generic production rate fn to each edge type individually.","title":"compute_production_rates()"},{"location":"intervention/","text":"Interventions Intervention abstract class Bases: ABC Abstract class responsible for intervening on cells, and resetting cells to their default states. intervene ( * args , ** kwargs ) abstractmethod Abstract method for intervening on cells. reset () abstractmethod Abstract method for resetting cells to their default state. Knockout Intervention Bases: Intervention","title":"Interventions"},{"location":"intervention/#interventions","text":"","title":"Interventions"},{"location":"intervention/#intervention-abstract-class","text":"Bases: ABC Abstract class responsible for intervening on cells, and resetting cells to their default states.","title":"Intervention abstract class"},{"location":"intervention/#flecs.intervention.Intervention.intervene","text":"Abstract method for intervening on cells.","title":"intervene()"},{"location":"intervention/#flecs.intervention.Intervention.reset","text":"Abstract method for resetting cells to their default state.","title":"reset()"},{"location":"intervention/#knockout-intervention","text":"Bases: Intervention","title":"Knockout Intervention"},{"location":"sets/","text":"Sets NodeSet __init__ ( super_cell , idx_low , idx_high , attribute_dict = None ) Class responsible for representing nodes of a given type (e.g. \"genes\" or \"protein complexes\", \"oligonucleotides\", \"small molecules\"). Its attribute \"state\" points to a subset of the state of the cell \"super_cell\". The subset is defined by the range [idx_low, idx_high] along the second axis. Similarly, the decay_rate and production_rate attributes point to subsets of the corresponding attributes of \"super_cell\". Multiple nodesets should not have overlapping idx ranges. Parameters: Name Type Description Default super_cell obj The cell this NodeSet belongs to. required idx_low int Beginning index of this NodeSet in the NodeTensor. required idx_high int Ending index of this NodeSet in the NodeTensor. Note this code corrects for the fact that arrays are indexed using half intervals by adding +1 to idx_high for all operations. required attribute_dict dict Dict of node attributes. Each node attribute is an array e.d., decay rate for each gene. This is done because for the ODE solver, the state of cell must be in a single tensor. We want the total state to encompass multiple nodesets, so we index the super cell so we can pass a nodeset tensor to the ODE solver. None EdgeSet __init__ ( edges = None , attribute_dict = None ) Class responsible for representing edges of a given type. An edge type is defined by a tuple (source_node_type, interaction_type, target_node_type). Examples of node types would be \"gene\", \"codes\", or \"protein\". Example interaction types would be \"inhibits\", \"facilitates\". The attribute state points to a subset of the state of the cell \"super_cell\". The subset is defined by the range [idx_low, idx_high] along the second axis. Similarly, the decay_rate and production_rate attributes point to subsets of the corresponding attributes of \"super_cell\". Parameters: Name Type Description Default edges torch . Tensor shape (n_edges, 2). The first column corresponds to the indices of the source nodes in cell[source_node_type]. The second column corresponds to the indices of the target nodes in cell[target_node_type]. None attribute_dict Dict [ str , torch . Tensor ] TODO? None add_edges ( edges , attribute_dict = None ) Adds provided edges with optional attibutes to the graph. Parameters: Name Type Description Default edges tensor A set of (src, target) pairs. required attribute_dict dict Optional attributes for each edge. None get_edges ( indices ) Retrieves edges indexed by indices, with their attributes. Parameters: Name Type Description Default indices shape (n_edges) boolean. required heads () property Returns parents. remove_edges ( indices ) Removes edges specified by indices. Parameters: Name Type Description Default indices torch . Tensor shape (n_edges) boolean. required tails () property Returns children.","title":"Sets"},{"location":"sets/#sets","text":"","title":"Sets"},{"location":"sets/#nodeset","text":"","title":"NodeSet"},{"location":"sets/#flecs.node_set.NodeSet.__init__","text":"Class responsible for representing nodes of a given type (e.g. \"genes\" or \"protein complexes\", \"oligonucleotides\", \"small molecules\"). Its attribute \"state\" points to a subset of the state of the cell \"super_cell\". The subset is defined by the range [idx_low, idx_high] along the second axis. Similarly, the decay_rate and production_rate attributes point to subsets of the corresponding attributes of \"super_cell\". Multiple nodesets should not have overlapping idx ranges. Parameters: Name Type Description Default super_cell obj The cell this NodeSet belongs to. required idx_low int Beginning index of this NodeSet in the NodeTensor. required idx_high int Ending index of this NodeSet in the NodeTensor. Note this code corrects for the fact that arrays are indexed using half intervals by adding +1 to idx_high for all operations. required attribute_dict dict Dict of node attributes. Each node attribute is an array e.d., decay rate for each gene. This is done because for the ODE solver, the state of cell must be in a single tensor. We want the total state to encompass multiple nodesets, so we index the super cell so we can pass a nodeset tensor to the ODE solver. None","title":"__init__()"},{"location":"sets/#edgeset","text":"","title":"EdgeSet"},{"location":"sets/#flecs.edge_set.EdgeSet.__init__","text":"Class responsible for representing edges of a given type. An edge type is defined by a tuple (source_node_type, interaction_type, target_node_type). Examples of node types would be \"gene\", \"codes\", or \"protein\". Example interaction types would be \"inhibits\", \"facilitates\". The attribute state points to a subset of the state of the cell \"super_cell\". The subset is defined by the range [idx_low, idx_high] along the second axis. Similarly, the decay_rate and production_rate attributes point to subsets of the corresponding attributes of \"super_cell\". Parameters: Name Type Description Default edges torch . Tensor shape (n_edges, 2). The first column corresponds to the indices of the source nodes in cell[source_node_type]. The second column corresponds to the indices of the target nodes in cell[target_node_type]. None attribute_dict Dict [ str , torch . Tensor ] TODO? None","title":"__init__()"},{"location":"sets/#flecs.edge_set.EdgeSet.add_edges","text":"Adds provided edges with optional attibutes to the graph. Parameters: Name Type Description Default edges tensor A set of (src, target) pairs. required attribute_dict dict Optional attributes for each edge. None","title":"add_edges()"},{"location":"sets/#flecs.edge_set.EdgeSet.get_edges","text":"Retrieves edges indexed by indices, with their attributes. Parameters: Name Type Description Default indices shape (n_edges) boolean. required","title":"get_edges()"},{"location":"sets/#flecs.edge_set.EdgeSet.heads","text":"Returns parents.","title":"heads()"},{"location":"sets/#flecs.edge_set.EdgeSet.remove_edges","text":"Removes edges specified by indices. Parameters: Name Type Description Default indices torch . Tensor shape (n_edges) boolean. required","title":"remove_edges()"},{"location":"sets/#flecs.edge_set.EdgeSet.tails","text":"Returns children.","title":"tails()"},{"location":"trajectory/","text":"Trajectories Determistic Trajectory with Euler's method Simulates the deterministic trajectory of the cells using Euler's method: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + {d \\operatorname{state} \\over dt} \\Delta t. $$ Parameters: Name Type Description Default cells CellPopulation CellPopulation. required time_range 1D torch.Tensor Time points at which the cells state should be evaluated. required Returns: Type Description torch . Tensor torch.Tensor: Trajectory of shape (n_time_points, n_cells, n_genes, *state_dim) Determistic Trajectory with solver Simulates the deterministic trajectory of the cells using the torchdiffeq solver. Parameters: Name Type Description Default cells CellPopulation CellPopulation. required time_range 1D torch.Tensor Time points at which the cells state should be evaluated. required method str argument for the solver. 'dopri5' Returns: Type Description torch . Tensor torch.Tensor: Trajectory of shape (n_time_points, n_cells, n_genes, *state_dim) Stochastic Trajectory Simulates stochastic trajectories of the cell using the tau-leaping method, which is a variation of the Gillespie algorithm: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{production rates})] - \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{decay rates})]. $$ Parameters: Name Type Description Default cells CellPopulation CellPopulation. required time_range 1D torch.Tensor Time points at which the cells state should be evaluated. required Returns: Type Description torch.Tensor: Trajectory of shape (n_time_points, n_cells, n_genes, *state_dim)","title":"Trajectories"},{"location":"trajectory/#trajectories","text":"","title":"Trajectories"},{"location":"trajectory/#determistic-trajectory-with-eulers-method","text":"Simulates the deterministic trajectory of the cells using Euler's method: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + {d \\operatorname{state} \\over dt} \\Delta t. $$ Parameters: Name Type Description Default cells CellPopulation CellPopulation. required time_range 1D torch.Tensor Time points at which the cells state should be evaluated. required Returns: Type Description torch . Tensor torch.Tensor: Trajectory of shape (n_time_points, n_cells, n_genes, *state_dim)","title":"Determistic Trajectory with Euler's method"},{"location":"trajectory/#determistic-trajectory-with-solver","text":"Simulates the deterministic trajectory of the cells using the torchdiffeq solver. Parameters: Name Type Description Default cells CellPopulation CellPopulation. required time_range 1D torch.Tensor Time points at which the cells state should be evaluated. required method str argument for the solver. 'dopri5' Returns: Type Description torch . Tensor torch.Tensor: Trajectory of shape (n_time_points, n_cells, n_genes, *state_dim)","title":"Determistic Trajectory with solver"},{"location":"trajectory/#stochastic-trajectory","text":"Simulates stochastic trajectories of the cell using the tau-leaping method, which is a variation of the Gillespie algorithm: $$ \\operatorname{state}(t + \\Delta t) = \\operatorname{state}(t) + \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{production rates})] - \\operatorname{Pois}[\\Delta t \\cdot (\\operatorname{decay rates})]. $$ Parameters: Name Type Description Default cells CellPopulation CellPopulation. required time_range 1D torch.Tensor Time points at which the cells state should be evaluated. required Returns: Type Description torch.Tensor: Trajectory of shape (n_time_points, n_cells, n_genes, *state_dim)","title":"Stochastic Trajectory"},{"location":"utils/","text":"Utils Project root Returns: Name Type Description str Path Path to the root of the project. Set seed Sets the numpy and torch seeds. Parameters: Name Type Description Default k seed. required Plot trajectory Function to plot the time evolution of the state of a cell. Parameters: Name Type Description Default trajectory torch . Tensor States of the cell observed at the different time points. Shape (n_time_points, 1, n_genes). required time_points list or 1D numpy.array Times of the observations. None legend bool Whether to add a legend to the plot. True Raises: Type Description RuntimeWarning If the trajectory contains more than one cell. Only the trajectory of the first cell is plotted.","title":"Utils"},{"location":"utils/#utils","text":"","title":"Utils"},{"location":"utils/#project-root","text":"Returns: Name Type Description str Path Path to the root of the project.","title":"Project root"},{"location":"utils/#set-seed","text":"Sets the numpy and torch seeds. Parameters: Name Type Description Default k seed. required","title":"Set seed"},{"location":"utils/#plot-trajectory","text":"Function to plot the time evolution of the state of a cell. Parameters: Name Type Description Default trajectory torch . Tensor States of the cell observed at the different time points. Shape (n_time_points, 1, n_genes). required time_points list or 1D numpy.array Times of the observations. None legend bool Whether to add a legend to the plot. True Raises: Type Description RuntimeWarning If the trajectory contains more than one cell. Only the trajectory of the first cell is plotted.","title":"Plot trajectory"}]}